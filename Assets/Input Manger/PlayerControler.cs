//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input Manger/PlayerControler.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControler: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControler()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControler"",
    ""maps"": [
        {
            ""name"": ""InGame/PlayerOne"",
            ""id"": ""c06632d8-d577-4fdf-b9a2-74ea106ed9e0"",
            ""actions"": [
                {
                    ""name"": ""WASD"",
                    ""type"": ""Value"",
                    ""id"": ""caf5c6cd-7112-4b17-ab96-358ce946abd7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""b572b4e4-b680-4c44-af48-acb659ed4ee5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Specials"",
                    ""type"": ""Button"",
                    ""id"": ""13903481-6b7b-4c46-bcfc-30ef827e6710"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""9da96624-4093-4fa2-b764-c357c79c4040"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f1a5f9c8-80b8-470d-8356-5255e5493313"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""91d9be7e-a47f-4f96-bb81-57e512ac077f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""df8bc760-f9d0-4e86-9c66-e420d90e3e87"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8f1a8396-e3c0-483b-ba34-69841959898a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ec7f6eff-b5df-4c76-bfd1-75ee9b4a6315"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13400d78-a884-4897-a4f4-370b9d1dd869"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Specials"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InGame/PlayerOne
        m_InGamePlayerOne = asset.FindActionMap("InGame/PlayerOne", throwIfNotFound: true);
        m_InGamePlayerOne_WASD = m_InGamePlayerOne.FindAction("WASD", throwIfNotFound: true);
        m_InGamePlayerOne_Fire = m_InGamePlayerOne.FindAction("Fire", throwIfNotFound: true);
        m_InGamePlayerOne_Specials = m_InGamePlayerOne.FindAction("Specials", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InGame/PlayerOne
    private readonly InputActionMap m_InGamePlayerOne;
    private List<IInGamePlayerOneActions> m_InGamePlayerOneActionsCallbackInterfaces = new List<IInGamePlayerOneActions>();
    private readonly InputAction m_InGamePlayerOne_WASD;
    private readonly InputAction m_InGamePlayerOne_Fire;
    private readonly InputAction m_InGamePlayerOne_Specials;
    public struct InGamePlayerOneActions
    {
        private @PlayerControler m_Wrapper;
        public InGamePlayerOneActions(@PlayerControler wrapper) { m_Wrapper = wrapper; }
        public InputAction @WASD => m_Wrapper.m_InGamePlayerOne_WASD;
        public InputAction @Fire => m_Wrapper.m_InGamePlayerOne_Fire;
        public InputAction @Specials => m_Wrapper.m_InGamePlayerOne_Specials;
        public InputActionMap Get() { return m_Wrapper.m_InGamePlayerOne; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InGamePlayerOneActions set) { return set.Get(); }
        public void AddCallbacks(IInGamePlayerOneActions instance)
        {
            if (instance == null || m_Wrapper.m_InGamePlayerOneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InGamePlayerOneActionsCallbackInterfaces.Add(instance);
            @WASD.started += instance.OnWASD;
            @WASD.performed += instance.OnWASD;
            @WASD.canceled += instance.OnWASD;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @Specials.started += instance.OnSpecials;
            @Specials.performed += instance.OnSpecials;
            @Specials.canceled += instance.OnSpecials;
        }

        private void UnregisterCallbacks(IInGamePlayerOneActions instance)
        {
            @WASD.started -= instance.OnWASD;
            @WASD.performed -= instance.OnWASD;
            @WASD.canceled -= instance.OnWASD;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @Specials.started -= instance.OnSpecials;
            @Specials.performed -= instance.OnSpecials;
            @Specials.canceled -= instance.OnSpecials;
        }

        public void RemoveCallbacks(IInGamePlayerOneActions instance)
        {
            if (m_Wrapper.m_InGamePlayerOneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInGamePlayerOneActions instance)
        {
            foreach (var item in m_Wrapper.m_InGamePlayerOneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InGamePlayerOneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InGamePlayerOneActions @InGamePlayerOne => new InGamePlayerOneActions(this);
    public interface IInGamePlayerOneActions
    {
        void OnWASD(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnSpecials(InputAction.CallbackContext context);
    }
}
